
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/lop/cs_operators.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_lop_cs_operators.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_lop_cs_operators.py:


.. _gallery:lop:cs_operators:

Compressive Sensing Operators
===============================================

.. contents::
    :depth: 2
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 14-15

Let's import necessary libraries 

.. GENERATED FROM PYTHON SOURCE LINES 15-29

.. code-block:: default

    import jax.numpy as jnp
    # Random numbers
    from jax import random
    # For plotting diagrams
    import matplotlib.pyplot as plt
    ## CR-Sparse modules
    import cr.sparse as crs
    # Linear operators
    from cr.sparse import lop
    # Some random number seeds
    key = random.PRNGKey(0)
    keys = random.split(key, 10)









.. GENERATED FROM PYTHON SOURCE LINES 30-33

Rademacher sensing operators
-----------------------------------------------------------------
Size of the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 33-34

.. code-block:: default

    m, n = 4, 8







.. GENERATED FROM PYTHON SOURCE LINES 35-38

Unnormalized atoms / columns
'''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 38-39

.. code-block:: default

    Phi = lop.rademacher_dict(keys[0], m, n, normalize_atoms=False)







.. GENERATED FROM PYTHON SOURCE LINES 40-41

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. code-block:: default

    print(lop.to_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.  1. -1. -1.  1. -1. -1.  1.]
     [ 1. -1. -1. -1.  1. -1.  1.  1.]
     [-1. -1. -1. -1. -1.  1. -1. -1.]
     [ 1. -1. -1.  1.  1. -1.  1. -1.]]




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Let's print the contents of the adjoint matrix

.. GENERATED FROM PYTHON SOURCE LINES 44-45

.. code-block:: default

    print(lop.to_adjoint_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.  1. -1.  1.]
     [ 1. -1. -1. -1.]
     [-1. -1. -1. -1.]
     [-1. -1. -1.  1.]
     [ 1.  1. -1.  1.]
     [-1. -1.  1. -1.]
     [-1.  1. -1.  1.]
     [ 1.  1. -1. -1.]]




.. GENERATED FROM PYTHON SOURCE LINES 46-47

Let's apply the forward operator

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default

    x = jnp.array([3, -2, 4, 8, 2, 2, 6, -1])
    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-24.  -2. -18.  16.]




.. GENERATED FROM PYTHON SOURCE LINES 51-52

Let's apply the adjoint operator

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: default

    z = Phi.trans(y)
    print(z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 56. -20.  28.  60.   8.  -8.  56. -24.]




.. GENERATED FROM PYTHON SOURCE LINES 55-56

Let's JIT compile the trans and times functions

.. GENERATED FROM PYTHON SOURCE LINES 56-57

.. code-block:: default

    Phi = lop.jit(Phi)







.. GENERATED FROM PYTHON SOURCE LINES 58-59

Let's verify the forward operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: default

    x = jnp.array([3, -2, 4, 8, 2, 2, 6, -1])
    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-24.  -2. -18.  16.]




.. GENERATED FROM PYTHON SOURCE LINES 63-64

Let's verify the adjoint operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: default

    z = Phi.trans(y)
    print(z)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 56. -20.  28.  60.   8.  -8.  56. -24.]




.. GENERATED FROM PYTHON SOURCE LINES 68-71

Normalized atoms / columns
'''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 71-72

.. code-block:: default

    Phi = lop.rademacher_dict(keys[0], m, n, normalize_atoms=True)







.. GENERATED FROM PYTHON SOURCE LINES 73-74

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 74-75

.. code-block:: default

    print(lop.to_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-0.5  0.5 -0.5 -0.5  0.5 -0.5 -0.5  0.5]
     [ 0.5 -0.5 -0.5 -0.5  0.5 -0.5  0.5  0.5]
     [-0.5 -0.5 -0.5 -0.5 -0.5  0.5 -0.5 -0.5]
     [ 0.5 -0.5 -0.5  0.5  0.5 -0.5  0.5 -0.5]]




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Check the column wise norms

.. GENERATED FROM PYTHON SOURCE LINES 77-78

.. code-block:: default

    print(crs.norms_l2_cw(lop.to_matrix(Phi)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1. 1. 1. 1. 1. 1. 1. 1.]




.. GENERATED FROM PYTHON SOURCE LINES 79-80

Let's print the contents of the adjoint matrix

.. GENERATED FROM PYTHON SOURCE LINES 80-81

.. code-block:: default

    print(lop.to_adjoint_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-0.5  0.5 -0.5  0.5]
     [ 0.5 -0.5 -0.5 -0.5]
     [-0.5 -0.5 -0.5 -0.5]
     [-0.5 -0.5 -0.5  0.5]
     [ 0.5  0.5 -0.5  0.5]
     [-0.5 -0.5  0.5 -0.5]
     [-0.5  0.5 -0.5  0.5]
     [ 0.5  0.5 -0.5 -0.5]]




.. GENERATED FROM PYTHON SOURCE LINES 82-83

Let's apply the forward operator

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: default

    x = jnp.array([3, -2, 4, 8, 2, 2, 6, -1])
    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-12.  -1.  -9.   8.]




.. GENERATED FROM PYTHON SOURCE LINES 87-88

Let's apply the adjoint operator

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    z = Phi.trans(y)
    print(z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [14. -5.  7. 15.  2. -2. 14. -6.]




.. GENERATED FROM PYTHON SOURCE LINES 91-92

Let's JIT compile the trans and times functions

.. GENERATED FROM PYTHON SOURCE LINES 92-93

.. code-block:: default

    Phi = lop.jit(Phi)







.. GENERATED FROM PYTHON SOURCE LINES 94-95

Let's verify the forward operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: default

    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-12.  -1.  -9.   8.]




.. GENERATED FROM PYTHON SOURCE LINES 98-99

Let's verify the adjoint operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 99-101

.. code-block:: default

    z = Phi.trans(y)
    print(z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [14. -5.  7. 15.  2. -2. 14. -6.]




.. GENERATED FROM PYTHON SOURCE LINES 102-105

Column wise application on input
'''''''''''''''''''''''''''''''''''''''
Number of signals

.. GENERATED FROM PYTHON SOURCE LINES 105-106

.. code-block:: default

    k = 5







.. GENERATED FROM PYTHON SOURCE LINES 107-108

Prepare a signal matrix

.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: default

    X = random.randint(keys[1], (n, k), -5, 5)
    print(X)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1  2  2 -4  2]
     [-3 -1 -3 -1 -5]
     [ 3 -1 -1 -3  2]
     [-3 -5 -1  1 -5]
     [ 0  3  1 -1 -5]
     [ 1  3 -3 -3 -3]
     [ 0  1 -5  0  0]
     [-2 -4  4 -1  1]]




.. GENERATED FROM PYTHON SOURCE LINES 111-112

Let's apply the forward operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: default

    Y = Phi.times(X)
    print(Y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-2.5 -1.   5.   3.  -2.5]
     [-0.5  3.   5.   0.   4.5]
     [ 3.5  4.   0.   3.   3.5]
     [-1.5  2.   0.   2.  -1.5]]




.. GENERATED FROM PYTHON SOURCE LINES 115-116

Let's apply the adjoint operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 116-119

.. code-block:: default

    Z = Phi.trans(Y)
    print(Z)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.5  1.   0.  -2.   1. ]
     [-2.  -5.   0.  -1.  -4.5]
     [ 0.5 -4.  -5.  -4.  -2. ]
     [-1.  -2.  -5.  -2.  -3.5]
     [-4.   0.   5.   1.  -1.5]
     [ 4.   0.  -5.  -1.   1.5]
     [-1.5  1.   0.  -2.   1. ]
     [-2.5 -2.   5.  -1.   0. ]]




.. GENERATED FROM PYTHON SOURCE LINES 120-123

Row wise application on input
'''''''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 123-124

.. code-block:: default

    Phi = lop.rademacher_dict(keys[0], m, n, normalize_atoms=True, axis=1)







.. GENERATED FROM PYTHON SOURCE LINES 125-126

Prepare a signal matrix with each signal along a row

.. GENERATED FROM PYTHON SOURCE LINES 126-127

.. code-block:: default

    XT = X.T







.. GENERATED FROM PYTHON SOURCE LINES 128-129

Let's apply the forward operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 129-131

.. code-block:: default

    Y = Phi.times(XT)
    print(Y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-2.5 -0.5  3.5 -1.5]
     [-1.   3.   4.   2. ]
     [ 5.   5.   0.   0. ]
     [ 3.   0.   3.   2. ]
     [-2.5  4.5  3.5 -1.5]]




.. GENERATED FROM PYTHON SOURCE LINES 132-133

Let's apply the adjoint operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 133-136

.. code-block:: default

    Z = Phi.trans(Y)
    print(Z)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.5 -2.   0.5 -1.  -4.   4.  -1.5 -2.5]
     [ 1.  -5.  -4.  -2.   0.   0.   1.  -2. ]
     [ 0.   0.  -5.  -5.   5.  -5.   0.   5. ]
     [-2.  -1.  -4.  -2.   1.  -1.  -2.  -1. ]
     [ 1.  -4.5 -2.  -3.5 -1.5  1.5  1.   0. ]]




.. GENERATED FROM PYTHON SOURCE LINES 137-140

Square sensing matrix
'''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 140-141

.. code-block:: default

    Phi = lop.rademacher_dict(keys[0], n, normalize_atoms=False)







.. GENERATED FROM PYTHON SOURCE LINES 142-143

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 143-146

.. code-block:: default

    print(lop.to_matrix(Phi))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 1.  1. -1. -1. -1. -1.  1.  1.]
     [-1.  1.  1.  1. -1. -1. -1. -1.]
     [-1. -1.  1.  1.  1. -1.  1. -1.]
     [ 1. -1.  1. -1.  1.  1.  1. -1.]
     [-1.  1. -1.  1.  1.  1. -1. -1.]
     [-1.  1. -1.  1.  1. -1.  1.  1.]
     [ 1. -1.  1. -1. -1. -1. -1.  1.]
     [-1. -1.  1. -1.  1. -1.  1. -1.]]




.. GENERATED FROM PYTHON SOURCE LINES 147-149

Gaussian sensing operators
-----------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 151-154

Unnormalized atoms / columns
'''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 154-155

.. code-block:: default

    Phi = lop.gaussian_dict(keys[0], m, n, normalize_atoms=False)







.. GENERATED FROM PYTHON SOURCE LINES 156-157

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 157-158

.. code-block:: default

    print(lop.to_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0.11122803 -0.16993073  1.129604    0.64738166 -0.4244191   0.5942929
       0.47133887 -0.06662087]
     [-0.5737654   0.8247352   0.13019586  0.19609931 -0.21847607  0.0974834
      -0.26925555 -0.35676587]
     [ 0.15494195  0.19627537  0.31454134  0.35439804  1.3098817  -0.47109568
       0.08758704  0.2653513 ]
     [-0.10465632  0.57652146  0.01025868 -0.50620335 -0.07852525  0.371066
      -0.6290615   0.21203126]]




.. GENERATED FROM PYTHON SOURCE LINES 159-160

Let's print the contents of the adjoint matrix

.. GENERATED FROM PYTHON SOURCE LINES 160-161

.. code-block:: default

    print(lop.to_adjoint_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0.11122803 -0.5737654   0.15494195 -0.10465632]
     [-0.16993073  0.8247352   0.19627537  0.57652146]
     [ 1.129604    0.13019586  0.31454134  0.01025868]
     [ 0.64738166  0.19609931  0.35439804 -0.50620335]
     [-0.4244191  -0.21847607  1.3098817  -0.07852525]
     [ 0.5942929   0.0974834  -0.47109568  0.371066  ]
     [ 0.47133887 -0.26925555  0.08758704 -0.6290615 ]
     [-0.06662087 -0.35676587  0.2653513   0.21203126]]




.. GENERATED FROM PYTHON SOURCE LINES 162-163

Let's apply the forward operator

.. GENERATED FROM PYTHON SOURCE LINES 163-166

.. code-block:: default

    x = jnp.array([3, -2, 4, 8, 2, 2, 6, -1])
    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [13.605416  -2.7819417  6.103368  -8.876923 ]




.. GENERATED FROM PYTHON SOURCE LINES 167-168

Let's apply the adjoint operator

.. GENERATED FROM PYTHON SOURCE LINES 168-170

.. code-block:: default

    z = Phi.trans(y)
    print(z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 4.984179   -8.526139   16.83523    14.918911    3.5251415   1.6452142
     13.280521   -0.17655145]




.. GENERATED FROM PYTHON SOURCE LINES 171-172

Let's JIT compile the trans and times functions

.. GENERATED FROM PYTHON SOURCE LINES 172-173

.. code-block:: default

    Phi = lop.jit(Phi)







.. GENERATED FROM PYTHON SOURCE LINES 174-175

Let's verify the forward operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 175-178

.. code-block:: default

    x = jnp.array([3, -2, 4, 8, 2, 2, 6, -1])
    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [13.605416  -2.7819417  6.103368  -8.876923 ]




.. GENERATED FROM PYTHON SOURCE LINES 179-180

Let's verify the adjoint operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: default

    z = Phi.trans(y)
    print(z)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 4.984179   -8.526139   16.83523    14.918911    3.5251415   1.6452142
     13.280521   -0.17655145]




.. GENERATED FROM PYTHON SOURCE LINES 184-187

Normalized atoms / columns
'''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 187-188

.. code-block:: default

    Phi = lop.gaussian_dict(keys[0], m, n, normalize_atoms=True)







.. GENERATED FROM PYTHON SOURCE LINES 189-190

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 190-191

.. code-block:: default

    print(lop.to_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0.18126318 -0.16351853  0.9574299   0.7066046  -0.30394688  0.69926095
       0.5641445  -0.13402437]
     [-0.935039    0.7936145   0.11035142  0.21403863 -0.1564612   0.11470159
      -0.3222714  -0.71772283]
     [ 0.25250173  0.18886907  0.26659897  0.38681865  0.9380691  -0.5543038
       0.10483275  0.5338198 ]
     [-0.17055357  0.5547669   0.00869506 -0.5525112  -0.0562357   0.43660623
      -0.7529224   0.42655337]]




.. GENERATED FROM PYTHON SOURCE LINES 192-193

Check the column wise norms

.. GENERATED FROM PYTHON SOURCE LINES 193-194

.. code-block:: default

    print(crs.norms_l2_cw(lop.to_matrix(Phi)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.99999994 1.         1.         0.99999994 0.99999994 1.
     0.99999994 0.99999994]




.. GENERATED FROM PYTHON SOURCE LINES 195-196

Let's print the contents of the adjoint matrix

.. GENERATED FROM PYTHON SOURCE LINES 196-197

.. code-block:: default

    print(lop.to_adjoint_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0.18126318 -0.935039    0.25250173 -0.17055357]
     [-0.16351853  0.7936145   0.18886907  0.5547669 ]
     [ 0.9574299   0.11035142  0.26659897  0.00869506]
     [ 0.7066046   0.21403863  0.38681865 -0.5525112 ]
     [-0.30394688 -0.1564612   0.9380691  -0.0562357 ]
     [ 0.69926095  0.11470159 -0.5543038   0.43660623]
     [ 0.5641445  -0.3222714   0.10483275 -0.7529224 ]
     [-0.13402437 -0.71772283  0.5338198   0.42655337]]




.. GENERATED FROM PYTHON SOURCE LINES 198-199

Let's apply the forward operator

.. GENERATED FROM PYTHON SOURCE LINES 199-202

.. code-block:: default

    x = jnp.array([3, -2, 4, 8, 2, 2, 6, -1])
    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 14.662902   -3.538056    5.4034195 -10.189851 ]




.. GENERATED FROM PYTHON SOURCE LINES 203-204

Let's apply the adjoint operator

.. GENERATED FROM PYTHON SOURCE LINES 204-206

.. code-block:: default

    z = Phi.trans(y)
    print(z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 9.068353   -9.837962   15.000216   17.323744    1.7386395   2.4032853
     17.650831   -0.88790536]




.. GENERATED FROM PYTHON SOURCE LINES 207-208

Let's JIT compile the trans and times functions

.. GENERATED FROM PYTHON SOURCE LINES 208-209

.. code-block:: default

    Phi = lop.jit(Phi)







.. GENERATED FROM PYTHON SOURCE LINES 210-211

Let's verify the forward operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 211-213

.. code-block:: default

    y = Phi.times(x)
    print(y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 14.662902   -3.538056    5.4034195 -10.189851 ]




.. GENERATED FROM PYTHON SOURCE LINES 214-215

Let's verify the adjoint operator after JIT compile

.. GENERATED FROM PYTHON SOURCE LINES 215-217

.. code-block:: default

    z = Phi.trans(y)
    print(z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 9.068353   -9.837962   15.000216   17.323744    1.7386395   2.4032853
     17.650831   -0.88790536]




.. GENERATED FROM PYTHON SOURCE LINES 218-221

Column wise application on input
'''''''''''''''''''''''''''''''''''''''
Number of signals

.. GENERATED FROM PYTHON SOURCE LINES 221-222

.. code-block:: default

    k = 5







.. GENERATED FROM PYTHON SOURCE LINES 223-224

Prepare a signal matrix

.. GENERATED FROM PYTHON SOURCE LINES 224-226

.. code-block:: default

    X = random.randint(keys[1], (n, k), -5, 5)
    print(X)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1  2  2 -4  2]
     [-3 -1 -3 -1 -5]
     [ 3 -1 -1 -3  2]
     [-3 -5 -1  1 -5]
     [ 0  3  1 -1 -5]
     [ 1  3 -3 -3 -3]
     [ 0  1 -5  0  0]
     [-2 -4  4 -1  1]]




.. GENERATED FROM PYTHON SOURCE LINES 227-228

Let's apply the forward operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 228-230

.. code-block:: default

    Y = Phi.times(X)
    print(Y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 2.0290778  -1.6782236  -6.5695024  -4.387031   -1.150117  ]
     [-0.20671892 -1.4208958  -6.335412    3.359605   -6.9671626 ]
     [-2.8017113  -2.7637084   3.4970746  -1.4208317  -4.3338513 ]
     [-0.22662884  0.53996277  2.6431794  -2.1312852  -0.9370823 ]]




.. GENERATED FROM PYTHON SOURCE LINES 231-232

Let's apply the adjoint operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 232-235

.. code-block:: default

    Z = Phi.trans(Y)
    print(Z)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.07697286e-01  2.34459132e-01  5.16526222e+00 -3.93183327e+00
       5.37161255e+00]
     [-1.15072978e+00 -1.07564843e+00 -1.82680178e+00  1.93287456e+00
      -6.67956877e+00]
     [ 1.17098403e+00 -2.49568629e+00 -6.03366089e+00 -4.22686148e+00
      -3.03354096e+00]
     [ 4.30970579e-01 -2.85735655e+00 -6.10571623e+00 -1.75285637e+00
      -3.46258569e+00]
     [-3.19984245e+00 -1.89050877e+00  6.11988258e+00 -4.05207336e-01
      -2.57308960e+00]
     [ 2.84919572e+00  4.31189954e-01 -6.10489130e+00 -2.82528734e+00
       3.89757782e-01]
     [ 1.08823550e+00 -1.18512368e+00 -3.28792763e+00 -2.10188103e+00
       1.84770596e+00]
     [-1.71585727e+00 -2.67033116e-04  8.42180729e+00 -3.49087119e+00
       2.44142413e+00]]




.. GENERATED FROM PYTHON SOURCE LINES 236-239

Row wise application on input
'''''''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 239-240

.. code-block:: default

    Phi = lop.gaussian_dict(keys[0], m, n, normalize_atoms=True, axis=1)







.. GENERATED FROM PYTHON SOURCE LINES 241-242

Prepare a signal matrix with each signal along a row

.. GENERATED FROM PYTHON SOURCE LINES 242-243

.. code-block:: default

    XT = X.T







.. GENERATED FROM PYTHON SOURCE LINES 244-245

Let's apply the forward operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 245-247

.. code-block:: default

    Y = Phi.times(XT)
    print(Y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 2.0290778  -0.20671892 -2.8017113  -0.22662884]
     [-1.6782236  -1.4208958  -2.7637084   0.53996277]
     [-6.5695024  -6.335412    3.4970746   2.6431794 ]
     [-4.387031    3.359605   -1.4208317  -2.1312852 ]
     [-1.150117   -6.9671626  -4.3338513  -0.9370823 ]]




.. GENERATED FROM PYTHON SOURCE LINES 248-249

Let's apply the adjoint operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 249-252

.. code-block:: default

    Z = Phi.trans(Y)
    print(Z)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.07697286e-01 -1.15072978e+00  1.17098403e+00  4.30970579e-01
      -3.19984245e+00  2.84919572e+00  1.08823550e+00 -1.71585727e+00]
     [ 2.34459132e-01 -1.07564843e+00 -2.49568629e+00 -2.85735655e+00
      -1.89050877e+00  4.31189954e-01 -1.18512368e+00 -2.67033116e-04]
     [ 5.16526222e+00 -1.82680178e+00 -6.03366089e+00 -6.10571623e+00
       6.11988258e+00 -6.10489130e+00 -3.28792763e+00  8.42180729e+00]
     [-3.93183327e+00  1.93287456e+00 -4.22686148e+00 -1.75285637e+00
      -4.05207336e-01 -2.82528734e+00 -2.10188103e+00 -3.49087119e+00]
     [ 5.37161255e+00 -6.67956877e+00 -3.03354096e+00 -3.46258569e+00
      -2.57308960e+00  3.89757782e-01  1.84770596e+00  2.44142413e+00]]




.. GENERATED FROM PYTHON SOURCE LINES 253-256

Square sensing matrix
'''''''''''''''''''''''''''''''''''
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 256-257

.. code-block:: default

    Phi = lop.gaussian_dict(keys[0], n, normalize_atoms=False)







.. GENERATED FROM PYTHON SOURCE LINES 258-259

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 259-262

.. code-block:: default

    print(lop.to_matrix(Phi))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-0.53925216 -0.3882511   0.25014424  0.3166799   0.14359106  0.28305036
      -0.07129304 -0.98230976]
     [ 0.48235154 -0.5217401  -0.2262006  -0.26431024  0.01718562  0.42955163
       0.17562762  0.27974603]
     [ 0.06246139  0.3475518  -0.3206163  -0.45171177 -0.16332498  0.07702307
      -0.5367819   0.07000328]
     [-0.6867531   0.2754768  -0.2697064   0.7436678  -0.41739193 -0.13276188
      -0.55814624  0.0482984 ]
     [ 0.09936127 -0.4716727   0.23744273 -0.04883419 -0.03434075 -0.17994446
       0.52424425  0.8963415 ]
     [ 0.5597964  -0.31409547  0.09103467 -0.19633469 -0.55392534  0.03580119
      -0.2882085  -0.1999811 ]
     [-0.30475712  0.5132278  -0.29558337  0.15022355  0.3522544   0.6384667
       0.3234877  -0.24913491]
     [ 0.17091885  0.16325223 -1.1366054   0.08454105 -0.1228935   0.02398683
      -0.16997333  0.14779326]]




.. GENERATED FROM PYTHON SOURCE LINES 263-266

Random matrix with orthonormal rows
-----------------------------------------------------------------
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 266-267

.. code-block:: default

    Phi = lop.random_orthonormal_rows_dict(keys[0], m, n)







.. GENERATED FROM PYTHON SOURCE LINES 268-269

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 269-270

.. code-block:: default

    print(lop.to_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-0.07292485  0.27826375  0.37618032  0.14324042 -0.10158526 -0.8588034
       0.06861627  0.05148385]
     [ 0.10594717 -0.3474947  -0.4921379   0.03977736 -0.30663046 -0.357414
      -0.5367419  -0.33820367]
     [-0.78170216 -0.33252037 -0.0975585   0.17760432 -0.20400117 -0.0035249
       0.00375868  0.4423434 ]
     [ 0.24007519 -0.20002364  0.31128162 -0.25678173  0.24578355 -0.03488652
      -0.60000247  0.56381875]]




.. GENERATED FROM PYTHON SOURCE LINES 271-272

Check the row wise norms

.. GENERATED FROM PYTHON SOURCE LINES 272-273

.. code-block:: default

    print(crs.norms_l2_rw(lop.to_matrix(Phi)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.9999999 1.        0.9999999 0.9999999]




.. GENERATED FROM PYTHON SOURCE LINES 274-275

Let's apply the forward operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 275-277

.. code-block:: default

    Y = Phi.times(X)
    print(Y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.0248178  -4.5349813   0.8376172   1.6546468   1.6348104 ]
     [-0.34021556 -0.32342052  3.8032455   3.1569734   3.0333958 ]
     [ 0.06556308 -4.40954     0.9112647   3.701841    0.48898292]
     [ 0.90166175 -0.56978536  6.6314516  -2.6558464   2.8263009 ]]




.. GENERATED FROM PYTHON SOURCE LINES 278-279

Let's apply the adjoint operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 279-281

.. code-block:: default

    Z = Phi.trans(Y)
    print(Z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0.20390563  3.6066031   1.2215693  -3.3175325   0.4984471 ]
     [-0.3691013   0.43069848 -2.7179902  -1.3363088  -1.3271042 ]
     [ 0.05619119 -1.2939788   0.41872117 -2.119083   -0.0457945 ]
     [-0.38021418 -1.2993004  -1.2697273   1.7020242  -0.2840655 ]
     [ 0.41666552  1.3193654   0.19272217 -2.5440552  -0.501299  ]
     [ 0.97002786  4.0456734  -2.3132422  -2.469758   -2.5884824 ]
     [-0.42846408  0.18771842 -5.959349    0.02648418 -3.2099257 ]
     [ 0.5996758  -2.395883    2.898881   -0.8424433   0.86808056]]




.. GENERATED FROM PYTHON SOURCE LINES 282-283

The frame operator

.. GENERATED FROM PYTHON SOURCE LINES 283-284

.. code-block:: default

    F = lop.frame(Phi)







.. GENERATED FROM PYTHON SOURCE LINES 285-286

Check that it's close to identity matrix

.. GENERATED FROM PYTHON SOURCE LINES 286-288

.. code-block:: default

    print(jnp.round(lop.to_matrix(F),2))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[1. 0. 0. 0.]
     [0. 1. 0. 0.]
     [0. 0. 1. 0.]
     [0. 0. 0. 1.]]




.. GENERATED FROM PYTHON SOURCE LINES 289-292

Random orthonormal basis operator
-----------------------------------------------------------------
Construct the operator wrapping the sensing matrix

.. GENERATED FROM PYTHON SOURCE LINES 292-293

.. code-block:: default

    Phi = lop.random_onb_dict(keys[0], n)







.. GENERATED FROM PYTHON SOURCE LINES 294-295

Let's print the contents of the matrix

.. GENERATED FROM PYTHON SOURCE LINES 295-296

.. code-block:: default

    print(lop.to_matrix(Phi))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-0.448704   -0.5938689  -0.17305267  0.3457046  -0.02234844 -0.2556191
       0.24217391  0.41477355]
     [ 0.40135783 -0.33225274 -0.37034228  0.13488609  0.16407289 -0.40697533
       0.09995174 -0.6087966 ]
     [ 0.05197322  0.36943048 -0.05747127  0.73125654 -0.5508195  -0.07972308
      -0.08231382 -0.07904251]
     [-0.57143736  0.00868553 -0.28070897 -0.42135626 -0.49334717 -0.08988534
      -0.10255462 -0.39377302]
     [ 0.08267709 -0.430307   -0.04261965  0.10346383 -0.04977352  0.2478968
      -0.8551025   0.01867646]
     [ 0.46579853 -0.0960511   0.06027021 -0.3657182  -0.49611133 -0.46696046
      -0.05138361  0.41183102]
     [-0.25358403  0.39233106 -0.04585971  0.02340384  0.41380572 -0.6423371
      -0.42444575  0.12302164]
     [ 0.14221913  0.22816646 -0.8621179  -0.07081565  0.07712521  0.24998598
       0.00859012  0.3330717 ]]




.. GENERATED FROM PYTHON SOURCE LINES 297-298

Check the row wise norms

.. GENERATED FROM PYTHON SOURCE LINES 298-299

.. code-block:: default

    print(crs.norms_l2_rw(lop.to_matrix(Phi)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.0000001 1.0000001 1.0000001 1.        1.        1.        1.
     1.       ]




.. GENERATED FROM PYTHON SOURCE LINES 300-301

Check the column wise norms

.. GENERATED FROM PYTHON SOURCE LINES 301-302

.. code-block:: default

    print(crs.norms_l2_cw(lop.to_matrix(Phi)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.         1.         1.0000001  1.0000001  1.0000001  1.
     1.         0.99999994]




.. GENERATED FROM PYTHON SOURCE LINES 303-304

Let's apply the forward operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 304-306

.. code-block:: default

    Y = Phi.times(X)
    print(Y)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-0.41112733 -4.1098323   1.9042804   3.6279798   1.2906815 ]
     [-0.10966682  2.637311    0.48498416  1.6383841   0.84062934]
     [-3.4480863  -5.522067   -1.8943813   1.1953783  -2.6002073 ]
     [ 1.6649833   0.9587699  -1.7528762   3.8546107   2.7016797 ]
     [ 0.9805374  -0.21447678  4.9521856  -0.38167197  1.2381845 ]
     [-0.19030249 -1.791954    4.3342104  -0.82851005  7.6542525 ]
     [-2.0195801  -2.5727851   3.293427    2.173172   -2.6965578 ]
     [-3.6167827   0.93010473  1.1493759   0.5583402  -3.029064  ]]




.. GENERATED FROM PYTHON SOURCE LINES 307-308

Let's apply the adjoint operator column wise

.. GENERATED FROM PYTHON SOURCE LINES 308-310

.. code-block:: default

    Z = Phi.trans(Y)
    print(Z)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-1.0000000e+00  2.0000012e+00  1.9999996e+00 -4.0000010e+00
       1.9999996e+00]
     [-3.0000000e+00 -9.9999946e-01 -3.0000000e+00 -1.0000005e+00
      -5.0000005e+00]
     [ 3.0000017e+00 -9.9999869e-01 -1.0000002e+00 -3.0000019e+00
       2.0000010e+00]
     [-3.0000021e+00 -5.0000019e+00 -9.9999976e-01  1.0000014e+00
      -5.0000014e+00]
     [ 6.3378997e-07  3.0000007e+00  9.9999988e-01 -1.0000007e+00
      -5.0000000e+00]
     [ 1.0000002e+00  3.0000000e+00 -2.9999998e+00 -3.0000007e+00
      -2.9999990e+00]
     [-1.8935772e-07  9.9999988e-01 -5.0000000e+00  1.2755389e-07
      -3.1231309e-07]
     [-1.9999996e+00 -4.0000000e+00  3.9999995e+00 -9.9999988e-01
       9.9999988e-01]]




.. GENERATED FROM PYTHON SOURCE LINES 311-312

The gram operator

.. GENERATED FROM PYTHON SOURCE LINES 312-313

.. code-block:: default

    G = lop.gram(Phi)







.. GENERATED FROM PYTHON SOURCE LINES 314-315

Check that it's close to identity matrix

.. GENERATED FROM PYTHON SOURCE LINES 315-316

.. code-block:: default

    print(jnp.round(lop.to_matrix(G),2))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[1. 0. 0. 0. 0. 0. 0. 0.]
     [0. 1. 0. 0. 0. 0. 0. 0.]
     [0. 0. 1. 0. 0. 0. 0. 0.]
     [0. 0. 0. 1. 0. 0. 0. 0.]
     [0. 0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 0. 1.]]




.. GENERATED FROM PYTHON SOURCE LINES 317-318

The frame operator

.. GENERATED FROM PYTHON SOURCE LINES 318-319

.. code-block:: default

    F = lop.frame(Phi)







.. GENERATED FROM PYTHON SOURCE LINES 320-321

Check that it's close to identity matrix

.. GENERATED FROM PYTHON SOURCE LINES 321-323

.. code-block:: default

    print(jnp.round(lop.to_matrix(F),2))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[1. 0. 0. 0. 0. 0. 0. 0.]
     [0. 1. 0. 0. 0. 0. 0. 0.]
     [0. 0. 1. 0. 0. 0. 0. 0.]
     [0. 0. 0. 1. 0. 0. 0. 0.]
     [0. 0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 0. 1.]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.288 seconds)


.. _sphx_glr_download_gallery_lop_cs_operators.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cs_operators.py <cs_operators.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cs_operators.ipynb <cs_operators.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
