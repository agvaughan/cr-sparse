
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/cluster/ssc_omp.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_cluster_ssc_omp.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_cluster_ssc_omp.py:


Sparse Subspace Clustering - OMP
=============================================

This example demonstrates the sparse subspace clustering algorithm via orthogonal matching pursuit.

.. GENERATED FROM PYTHON SOURCE LINES 9-10

Configure JAX to work with 64-bit floating point precision. 

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: default

    from jax.config import config
    config.update("jax_enable_x64", True)








.. GENERATED FROM PYTHON SOURCE LINES 14-15

Let's import necessary libraries 

.. GENERATED FROM PYTHON SOURCE LINES 15-32

.. code-block:: default

    from jax import random
    import jax.numpy as jnp
    import cr.sparse as crs
    import cr.sparse.data as crdata
    import cr.sparse.la as crla
    import cr.sparse.la.subspaces
    # clustering related
    import cr.sparse.cluster.spectral as spectral
    import cr.sparse.cluster.ssc as ssc
    # Plotting
    import matplotlib.pyplot as plt
    # evaluation
    import sklearn.metrics
    # Some PRNGKeys for later use
    key = random.PRNGKey(0)
    keys = random.split(key, 10)








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Problem configuration

.. GENERATED FROM PYTHON SOURCE LINES 34-44

.. code-block:: default


    # ambient space dimension
    N = 40
    # Subspace dimension
    D = 5
    # Number of subspaces
    K = 5
    # Number of points per subspace
    S = 50








.. GENERATED FROM PYTHON SOURCE LINES 45-47

Test data preparation
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 49-50

Construct orthonormal bases for K subspaces

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    bases = crdata.random_subspaces_jit(keys[0], N, D, K)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Measure angles between subspaces in degrees

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: default

    angles = crla.subspaces.smallest_principal_angles_deg(bases)








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Print the minimum angle between any pair of subspaces

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    print(crs.off_diagonal_min(angles))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    53.35521088678853




.. GENERATED FROM PYTHON SOURCE LINES 61-62

Generate uniformly distributed points on each subspace

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    X = crdata.uniform_points_on_subspaces(keys[1], bases, S)








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Assign true labels to each point to corresponding 
subspace index

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default

    true_labels = jnp.repeat(jnp.arange(K), S)
    print(true_labels)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2
     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
     2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
     3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
     4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]




.. GENERATED FROM PYTHON SOURCE LINES 71-72

Total number of data points

.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: default

    total = len(true_labels)
    print(total)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    250




.. GENERATED FROM PYTHON SOURCE LINES 76-78

Sparse Subspace Clustering Algorithm
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 80-82

Build representation of each point in terms of other points
by using Orthogonal Matching Pursuit algorithm

.. GENERATED FROM PYTHON SOURCE LINES 82-84

.. code-block:: default

    Z, I, R = ssc.build_representation_omp_jit(X, D)








.. GENERATED FROM PYTHON SOURCE LINES 85-86

Combine values and indices to form full representation

.. GENERATED FROM PYTHON SOURCE LINES 86-88

.. code-block:: default

    Z_full = ssc.sparse_to_full_rep(Z, I)








.. GENERATED FROM PYTHON SOURCE LINES 89-90

Build the affinity matrix

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: default

    affinity = abs(Z_full) + abs(Z_full).T
    plt.imshow(affinity, cmap='gray')




.. image-sg:: /gallery/cluster/images/sphx_glr_ssc_omp_001.png
   :alt: ssc omp
   :srcset: /gallery/cluster/images/sphx_glr_ssc_omp_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f5d58e62d60>



.. GENERATED FROM PYTHON SOURCE LINES 94-95

Perform the spectral clustering on the affinity matrix

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: default

    res = spectral.unnormalized_k_jit(keys[2], affinity, K)








.. GENERATED FROM PYTHON SOURCE LINES 98-99

Predicted cluster labels

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: default

    pred_labels = res.assignment
    print(pred_labels)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
     4 4 4 4 4 4 4 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3
     3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
     3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]




.. GENERATED FROM PYTHON SOURCE LINES 103-104

Evaluate the clustering performance

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default

    print(sklearn.metrics.rand_score(true_labels, pred_labels))







.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1.0




.. GENERATED FROM PYTHON SOURCE LINES 109-111

SSC-OMP with shuffled data
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 113-114

Choose a random permutation

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: default

    perm = random.permutation(keys[3], total)








.. GENERATED FROM PYTHON SOURCE LINES 117-118

Randomly permute the data points

.. GENERATED FROM PYTHON SOURCE LINES 118-123

.. code-block:: default

    X = X[:, perm]
    # Permute the true labels accordingly
    true_labels = true_labels[perm]
    print(true_labels)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 3 2 2 1 4 0 0 3 3 0 3 4 2 4 3 3 0 2 1 3 4 1 3 0 2 4 1 0 4 2 2 3 0 2 4 3
     3 0 0 1 0 4 3 1 1 4 4 1 1 2 4 1 0 3 4 1 4 0 1 1 2 0 1 3 0 3 4 0 0 4 1 1 1
     3 2 4 0 2 3 3 1 2 3 2 1 1 4 3 4 2 0 0 4 4 1 4 0 2 2 0 4 4 2 0 1 1 1 4 1 2
     2 4 2 0 0 4 2 1 0 2 3 3 3 1 3 4 3 0 4 3 4 2 1 3 3 4 3 4 3 1 4 4 2 0 0 1 1
     1 1 1 3 3 4 2 1 2 1 4 4 3 2 3 0 0 1 4 1 0 4 3 1 1 2 3 1 2 0 0 2 4 2 2 2 2
     0 3 3 1 0 3 2 0 4 0 0 4 4 0 1 0 1 1 4 3 3 1 3 2 2 3 0 4 2 4 3 2 3 0 3 2 3
     3 0 4 2 0 2 2 4 0 2 1 2 1 0 3 0 3 2 1 0 2 1 4 4 2 0 2 4]




.. GENERATED FROM PYTHON SOURCE LINES 124-126

Build representation of each point in terms of other points
by using Orthogonal Matching Pursuit algorithm

.. GENERATED FROM PYTHON SOURCE LINES 126-128

.. code-block:: default

    Z, I, R = ssc.build_representation_omp_jit(X, D)








.. GENERATED FROM PYTHON SOURCE LINES 129-130

Combine values and indices to form full representation

.. GENERATED FROM PYTHON SOURCE LINES 130-132

.. code-block:: default

    Z_full = ssc.sparse_to_full_rep(Z, I)








.. GENERATED FROM PYTHON SOURCE LINES 133-134

Build the affinity matrix

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: default

    affinity = abs(Z_full) + abs(Z_full).T
    plt.imshow(affinity, cmap='gray')




.. image-sg:: /gallery/cluster/images/sphx_glr_ssc_omp_002.png
   :alt: ssc omp
   :srcset: /gallery/cluster/images/sphx_glr_ssc_omp_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f5d58cc4700>



.. GENERATED FROM PYTHON SOURCE LINES 138-139

Perform the spectral clustering on the affinity matrix

.. GENERATED FROM PYTHON SOURCE LINES 139-141

.. code-block:: default

    res = spectral.unnormalized_k_jit(keys[4], affinity, K)








.. GENERATED FROM PYTHON SOURCE LINES 142-143

Predicted cluster labels

.. GENERATED FROM PYTHON SOURCE LINES 143-146

.. code-block:: default

    pred_labels = res.assignment
    print(pred_labels)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [3 1 4 4 2 0 3 3 1 1 3 1 0 4 0 1 1 3 4 2 1 0 2 1 3 4 0 2 3 0 4 4 1 3 4 0 1
     1 3 3 2 3 0 1 2 2 0 0 2 2 4 0 2 3 1 0 2 0 3 2 2 4 3 2 1 3 1 0 3 3 0 2 2 2
     1 4 0 3 4 1 1 2 4 1 4 2 2 0 1 0 4 3 3 0 0 2 0 3 4 4 3 0 0 4 3 2 2 2 0 2 4
     4 0 4 3 3 0 4 2 3 4 1 1 1 2 1 0 1 3 0 1 0 4 2 1 1 0 1 0 1 2 0 0 4 3 3 2 2
     2 2 2 1 1 0 4 2 4 2 0 0 1 4 1 3 3 2 0 2 3 0 1 2 2 4 1 2 4 3 3 4 0 4 4 4 4
     3 1 1 2 3 1 4 3 0 3 3 0 0 3 2 3 2 2 0 1 1 2 1 4 4 1 3 0 4 0 1 4 1 3 1 4 1
     1 3 0 4 3 4 4 0 3 4 2 4 2 3 1 3 1 4 2 3 4 2 0 0 4 3 4 0]




.. GENERATED FROM PYTHON SOURCE LINES 147-148

Evaluate the clustering performance

.. GENERATED FROM PYTHON SOURCE LINES 148-150

.. code-block:: default

    print(sklearn.metrics.rand_score(true_labels, pred_labels))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1.0





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.566 seconds)


.. _sphx_glr_download_gallery_cluster_ssc_omp.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ssc_omp.py <ssc_omp.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ssc_omp.ipynb <ssc_omp.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
